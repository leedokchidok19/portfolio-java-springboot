# DATABASE (H2)
# spring.h2.console.enabled - H2 콘솔의 접속을 허용할지의 여부이다. true로 설정한다.
spring.h2.console.enabled=true
# spring.h2.console.path - 콘솔 접속을 위한 URL 경로이다.
spring.h2.console.path=/h2-console
# spring.datasource.url - 데이터베이스 접속을 위한 경로이다. jdbc:h2:~/local 로 설정했기 때문에 사용자의 홈디렉터리(~ 에 해당하는 경로) 밑에 local.mv.db 라는 파일을 생성해야 한다
# 만약 jdbc:h2:~/test라고 설정했다면 test.mv.db 라는 파일을 생성해야 한다.
# 사용자의 홈디렉터리는 윈도우의 경우에는 C:\Users\(사용자명) 이고 맥OS의 경우에는 /Users/(사용자명) 이다. 본인이 사용하는 OS에 맞는 홈디렉터리에 local.mv.db 파일을 생성하자. 파일은 내용 없이 빈파일로 생성한다.
#spring.datasource.url=jdbc:h2:~/local
spring.datasource.url=jdbc:h2:file:C:/Users/duckh/Desktop/springboot-h2/local
# spring.datasource.driverClassName - 데이터베이스 접속시 사용하는 드라이버이다.
spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username - 데이터베이스의 사용자명이다. (사용자명은 기본 값인 sa로 설정한다.)
spring.datasource.username=sa
# spring.datasource.password - 데이터베이스의 패스워드이다. 로컬 개발 용도로만 사용하기 때문에 패스워드를 설정하지 않았다.
spring.datasource.password=


# JPA
# spring.jpa.properties.hibernate.dialect - 데이터베이스 엔진 종류를 설정한다.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
# spring.jpa.hibernate.ddl-auto - 엔티티를 기준으로 테이블을 생성하는 규칙을 정의한다.
spring.jpa.hibernate.ddl-auto=update